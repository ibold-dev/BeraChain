/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface XPRewardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimXP"
      | "getMyXP"
      | "lastClaimedTimestamp"
      | "timeUntilNextClaim"
      | "timesSigned"
      | "timesUpdated"
      | "updateTimeSigned"
      | "updateTimeUpdated"
      | "xpBalances"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "XPClaimed"): EventFragment;

  encodeFunctionData(functionFragment: "claimXP", values?: undefined): string;
  encodeFunctionData(functionFragment: "getMyXP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastClaimedTimestamp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timeUntilNextClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timesSigned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timesUpdated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTimeSigned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTimeUpdated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xpBalances",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "claimXP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMyXP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeUntilNextClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timesSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timesUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTimeSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTimeUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xpBalances", data: BytesLike): Result;
}

export namespace XPClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface XPReward extends BaseContract {
  connect(runner?: ContractRunner | null): XPReward;
  waitForDeployment(): Promise<this>;

  interface: XPRewardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimXP: TypedContractMethod<[], [void], "nonpayable">;

  getMyXP: TypedContractMethod<[], [bigint], "view">;

  lastClaimedTimestamp: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  timeUntilNextClaim: TypedContractMethod<[], [bigint], "view">;

  timesSigned: TypedContractMethod<[], [bigint], "view">;

  timesUpdated: TypedContractMethod<[], [bigint], "view">;

  updateTimeSigned: TypedContractMethod<[], [void], "nonpayable">;

  updateTimeUpdated: TypedContractMethod<[], [void], "nonpayable">;

  xpBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimXP"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMyXP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastClaimedTimestamp"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "timeUntilNextClaim"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "timesSigned"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "timesUpdated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateTimeSigned"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTimeUpdated"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "xpBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "XPClaimed"
  ): TypedContractEvent<
    XPClaimedEvent.InputTuple,
    XPClaimedEvent.OutputTuple,
    XPClaimedEvent.OutputObject
  >;

  filters: {
    "XPClaimed(address,uint256)": TypedContractEvent<
      XPClaimedEvent.InputTuple,
      XPClaimedEvent.OutputTuple,
      XPClaimedEvent.OutputObject
    >;
    XPClaimed: TypedContractEvent<
      XPClaimedEvent.InputTuple,
      XPClaimedEvent.OutputTuple,
      XPClaimedEvent.OutputObject
    >;
  };
}
